name: Deploy to GCP

on:
  push:
    branches: [ master ]

env:
  SERVICE_NAME: chatgpt-telegram-bot
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GITHUB_SHA: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Enable auth plugin
        run: |
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Setup GCP Service Account
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Prepare gcloud components
        run: |
          gcloud components install gke-gcloud-auth-plugin
          gcloud components update
          gcloud --quiet auth configure-docker

      - name: Build Docker Image
        run: |
          docker build -t gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ env.GITHUB_SHA }} .

      - name: Push Docker Image
        run: |
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ env.GITHUB_SHA }}

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Deploy to GKE
        run: |
          gcloud container clusters get-credentials cluster-1 \
            --location us-central1-c
          helm upgrade --install chatgpt-telegram-bot ./helm-chart \
            --set 'SERVICE_NAME=$SERVICE_NAME' \
            --set 'IMAGE_NAME=gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ env.GITHUB_SHA }}' \
            --set 'TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}' \
            --set 'GPT_TOKEN=${{ secrets.GPT_TOKEN }}' \
            --set 'TELEGRAM_AUTHORIZED_USER_IDS=${{ secrets.TELEGRAM_AUTHORIZED_USER_IDS }}' \
            --wait

      - name: Wait for Deployment
        run: |
          kubectl rollout status deployment/$SERVICE_NAME

      - name: Get Service Information
        run: |
          kubectl get services -o wide
