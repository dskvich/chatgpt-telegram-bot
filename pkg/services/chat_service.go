package services

import (
	"context"
	"errors"
	"fmt"
	"log/slog"
	"strings"
	"time"

	"github.com/samber/lo"

	"github.com/dskvich/chatgpt-telegram-bot/pkg/domain"
)

type ChatRepository interface {
	Save(chat domain.Chat)
	GetByID(chatID int64) (domain.Chat, time.Time, bool)
	Clear(chatID int64)
}

type SettingsRepository interface {
	Save(ctx context.Context, settings domain.Settings) error
	GetByChatID(ctx context.Context, chatID int64) (*domain.Settings, error)
}

type chatService struct {
	chatRepo            ChatRepository
	settingsRepo        SettingsRepository
	supportedTextModels []string
	supportedTTLOptions []time.Duration
	responseCh          chan<- domain.Response
}

func NewChatService(
	chatRepo ChatRepository,
	settingsRepo SettingsRepository,
	supportedTextModels []string,
	supportedTTLOptions []time.Duration,
	responseCh chan<- domain.Response,
) *chatService {
	return &chatService{
		chatRepo:            chatRepo,
		settingsRepo:        settingsRepo,
		supportedTextModels: supportedTextModels,
		supportedTTLOptions: supportedTTLOptions,
		responseCh:          responseCh,
	}
}

func (c *chatService) ClearChatHistory(ctx context.Context, chatID int64) {
	c.chatRepo.Clear(chatID)
	c.responseCh <- domain.Response{
		ChatID: chatID,
		Text:   "üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç. üöÄ",
	}
}

func (c *chatService) SendTextModels(ctx context.Context, chatID int64) {
	c.responseCh <- domain.Response{
		ChatID: chatID,
		Keyboard: &domain.Keyboard{
			Title:          "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å GPT:",
			ButtonLabels:   c.supportedTextModels,
			CallbackPrefix: domain.SetTextModelCallbackPrefix,
			ButtonsPerRow:  2,
		},
	}
}

func (c *chatService) SetTextModel(ctx context.Context, chatID int64, modelRaw string) {
	model, err := c.parseTextModel(modelRaw)
	if err != nil {
		c.responseCh <- domain.Response{ChatID: chatID, Err: err}
		return
	}

	settings, _ := c.settingsRepo.GetByChatID(ctx, chatID)
	settings, _ = lo.Coalesce(settings, &domain.Settings{ChatID: chatID})
	settings.TextModel = model
	c.settingsRepo.Save(ctx, *settings)

	c.responseCh <- domain.Response{
		ChatID: chatID,
		Text:   "‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: " + model,
	}

	c.ClearChatHistory(ctx, chatID)
}

func (c *chatService) parseTextModel(modelRaw string) (string, error) {
	if !strings.HasPrefix(modelRaw, domain.SetTextModelCallbackPrefix) {
		return "", fmt.Errorf("invalid format, expected prefix '%s'", domain.SetTextModelCallbackPrefix)
	}

	model := strings.TrimPrefix(modelRaw, domain.SetTextModelCallbackPrefix)

	if lo.Contains(c.supportedTextModels, model) {
		return model, nil
	}

	return "", errors.New("unsupported model")
}

func (c *chatService) SendImageModels(ctx context.Context, chatID int64) {
	c.responseCh <- domain.Response{
		ChatID: chatID,
		Text:   "üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß",
	}
}

func (c *chatService) SetImageModel(ctx context.Context, chatID int64, model string) {
	settings, _ := c.settingsRepo.GetByChatID(ctx, chatID)
	settings, _ = lo.Coalesce(settings, &domain.Settings{ChatID: chatID})
	settings.ImageModel = model
	c.settingsRepo.Save(ctx, *settings)

	c.responseCh <- domain.Response{
		ChatID: chatID,
		Text:   "‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: " + model,
	}
}

func (c *chatService) SendTTLOptions(ctx context.Context, chatID int64) {
	ttlOptions := lo.Map(c.supportedTTLOptions, func(d time.Duration, _ int) string {
		return c.shortDuration(d)
	})

	c.responseCh <- domain.Response{
		ChatID: chatID,
		Keyboard: &domain.Keyboard{
			Title:          "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞:",
			ButtonLabels:   ttlOptions,
			CallbackPrefix: domain.SetTTLCallbackPrefix,
			ButtonsPerRow:  10,
		},
	}
}

func (c *chatService) shortDuration(d time.Duration) string {
	s := d.String()
	s = lo.Ternary(strings.HasSuffix(s, "m0s"), s[:len(s)-2], s)
	s = lo.Ternary(strings.HasSuffix(s, "h0m"), s[:len(s)-2], s)
	return s
}

func (c *chatService) SetChatTTL(ctx context.Context, chatID int64, ttlRaw string) {
	ttl, err := c.parseTTL(ttlRaw)
	if err != nil {
		c.responseCh <- domain.Response{ChatID: chatID, Err: fmt.Errorf("error parsing ttl duration: %w", err)}
		return
	}

	settings, _ := c.settingsRepo.GetByChatID(ctx, chatID)
	settings, _ = lo.Coalesce(settings, &domain.Settings{ChatID: chatID})
	settings.TTL = ttl
	c.settingsRepo.Save(ctx, *settings)

	c.responseCh <- domain.Response{
		ChatID: chatID,
		Text:   "‚úÖ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —á–∞—Ç–∞ (TTL) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " + c.shortDuration(ttl),
	}
}

func (c *chatService) parseTTL(ttlRaw string) (time.Duration, error) {
	if !strings.HasPrefix(ttlRaw, domain.SetTTLCallbackPrefix) {
		return 0, fmt.Errorf("invalid format, expected prefix '%s'", domain.SetTTLCallbackPrefix)
	}

	ttlStr := strings.TrimPrefix(ttlRaw, domain.SetTTLCallbackPrefix)

	ttl, err := time.ParseDuration(ttlStr)
	if err != nil {
		return 0, err
	}

	if lo.Contains(c.supportedTTLOptions, ttl) {
		return ttl, nil
	}

	return 0, errors.New("unsupported ttl option")
}

func (c *chatService) SendSystemPrompt(ctx context.Context, chatID int64) {
	c.responseCh <- domain.Response{
		ChatID: chatID,
		Text:   "üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß",
	}
}

func (c *chatService) SetSystemPrompt(ctx context.Context, chatID int64, prompt string) {
	settings, _ := c.settingsRepo.GetByChatID(ctx, chatID)
	settings, _ = lo.Coalesce(settings, &domain.Settings{ChatID: chatID})
	settings.SystemPrompt = prompt
	c.settingsRepo.Save(ctx, *settings)

	c.responseCh <- domain.Response{
		ChatID: chatID,
		Text:   "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " + prompt,
	}
}

func (c *chatService) SendGreeting(ctx context.Context, chatID int64) {
	greeting := `üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π ChatGPT Telegram-–±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üÜï **/new** ‚Äî –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
‚è≥ **/ttl** ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —á–∞—Ç–∞
üìù **/text_models** ‚Äî –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞
üñºÔ∏è **/image_models** ‚Äî –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
‚öôÔ∏è **/system_prompt** ‚Äî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é

üñäÔ∏è –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ–º–æ–≥—É!
üé® –ù–∞–ø–∏—à–∏ "–Ω–∞—Ä–∏—Å—É–π ..." –∏ —è —Å–æ–∑–¥–∞–º –∫–∞—Ä—Ç–∏–Ω–∫—É.
üéô –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –ø–æ–π–º—É.
üì∑ –û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É ‚Äî —è –æ–ø–∏—à—É –µ—ë –∏–ª–∏ –æ—Ç–≤–µ—á—É –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–µ–π.

–ù–∞—á–Ω–µ–º? üöÄ`

	c.responseCh <- domain.Response{
		ChatID: chatID,
		Text:   greeting,
	}
}

func (c *chatService) Save(ctx context.Context, chat domain.Chat) error {
	c.chatRepo.Save(chat)

	return nil
}

func (c *chatService) GetChatByID(ctx context.Context, chatID int64) (*domain.Chat, error) {
	settings, err := c.settingsRepo.GetByChatID(ctx, chatID)
	if err != nil && !errors.Is(err, domain.ErrNotFound) {
		return nil, fmt.Errorf("fetching settings: %w", err)
	}

	settings, _ = lo.Coalesce(settings, &domain.Settings{})
	settings.TextModel, _ = lo.Coalesce(settings.TextModel, domain.Gpt4oMiniModel)
	settings.TTL, _ = lo.Coalesce(settings.TTL, 15*time.Minute)

	chat, lastUpdate, ok := c.chatRepo.GetByID(chatID)
	if ok && !c.isExpired(lastUpdate, settings.TTL) {
		return &chat, nil
	}

	slog.DebugContext(ctx, "Creating a new chat with parameters",
		"textModel", settings.TextModel,
		"ttl", settings.TTL,
		"systemPrompt", settings.SystemPrompt,
	)

	messages := lo.If(settings.SystemPrompt != "",
		[]domain.ChatMessage{{Role: "developer", Content: settings.SystemPrompt}}).
		Else(nil)

	c.responseCh <- domain.Response{
		ChatID: chatID,
		Text: fmt.Sprintf(`<i>üõ†Ô∏è –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç!
		–¢–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å GPT: %s
		–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %s
		–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: %s
		</i>`, settings.TextModel, settings.TTL, settings.SystemPrompt),
	}

	return &domain.Chat{
		ID:        chatID,
		ModelName: settings.TextModel,
		Messages:  messages,
	}, nil
}

func (c *chatService) isExpired(lastUpdate time.Time, ttl time.Duration) bool {
	if ttl <= 0 {
		return false
	}
	return time.Since(lastUpdate) > ttl
}
